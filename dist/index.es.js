import{createContext as e,useContext as r,useState as t,useCallback as o,useEffect as n}from"react";const s=e(),l=()=>{const e=r(s);if(!e)throw new Error("useFetch hook should be wrapped with FetchContext provider");return e},i=()=>{const[e,r]=t({}),[s,l]=t(!1),[i,a]=t({error:!1,msg:null}),[c,u]=t({}),h=o(((e,t)=>e.reduce(((o,n,s)=>o.then((o=>{if(n?.url){let o=n?.options,{url:i}=n;return n.options||(o={}),fetch(i,{...o,signal:t}).then((e=>Promise.all([e.text(),e]))).then((([t,o])=>{try{let i=JSON.parse(t);return o.ok?(r((e=>({...e,[n?.id||s]:i}))),e.length-1===s&&l(!1),Promise.resolve({data:i,res:o})):Promise.reject(i)}catch(e){return o.ok?Promise.resolve({data:t,res:o}):Promise.reject()}}))}return"function"==typeof n?.func?(e.length-1===s&&l(!1),o&&0!==Object.keys(o).length?n.func(o?.data,o?.res):n.func(),Promise.resolve(o)):(e.length-1===s&&l(!1),Promise.resolve(o))}))),Promise.resolve()).catch((e=>{l(!1),r(!1),a({error:!0,msg:e})}))),[]),m=o((e=>{var t;t=e,Array.isArray(t)&&0===t.length||(u(e),l(!0),a({error:!1,msg:null}),r({}))}),[]);return n((()=>{if(!s)return;let e=new AbortController;return h(c,e.signal),()=>e.abort()}),[s,c,h]),{response:e,error:i,isLoading:s,doFetch:m}};export{s as FetchContext,i as default,l as useFetchContext};
